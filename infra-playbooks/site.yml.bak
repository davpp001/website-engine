- hosts: ubuntu
  become: true
  tasks:
    - name: Ensure Apache and UFW are installed
      apt:
        name:
          - apache2
          - ufw
        state: present
        update_cache: yes
    - name: Ensure UFW allows HTTP
      ufw:
        rule: allow
        port: '80'
    - name: Ensure UFW allows HTTPS
      ufw:
        rule: allow
        port: '443'
    - name: Enable UFW
      ufw:
        state: enabled
    - name: Ensure MySQL backup directory exists
      file:
        path: /var/backups/mysql
        state: directory
        owner: root
        group: root
        mode: '0700'
    - name: Schedule daily MySQL dump at 03:00
      cron:
        name: "daily mysql backup"
        minute: "0"
        hour: "3"
        job: "mysqldump --single-transaction --routines --events --all-databases | gzip > /var/backups/mysql/backup-$(date +\\%F).sql.gz"
        user: root
    - name: Remove MySQL backups older than 14 days
      cron:
        name: "cleanup old mysql backups"
        minute: "0"
        hour: "4"
        job: "find /var/backups/mysql -type f -mtime +14 -name '*.gz' -delete"
        user: root
    - name: Ensure snapshot script directory exists
      file:
        path: /usr/local/bin
        state: directory
        owner: root
        group: root
        mode: '0755'

    - name: Deploy IONOS snapshot script
      copy:
        dest: /usr/local/bin/ionos-snapshot.sh
        content: |
          #!/usr/bin/env bash
          export IONOS_TOKEN="{{ ionos_token }}"
          DATACENTER_ID="{{ datacenter_id }}"
          VOLUME_ID="{{ volume_id }}"
          curl -s -X POST \
            "https://api.ionos.com/cloudapi/v6/datacenters/${DATACENTER_ID}/volumes/${VOLUME_ID}/create-snapshot" \
            -H "Authorization: Bearer ${IONOS_TOKEN}" \
            -H "Content-Type: application/json" \
            -d "{\"properties\":{\"name\":\"snapshot-$(date +%F)\"}}"
        owner: root
        group: root
        mode: '0755'

    - name: Schedule daily IONOS snapshot at 01:00
      cron:
        name: "daily ionos snapshot"
        minute: "0"
        hour: "1"
        job: "/usr/local/bin/ionos-snapshot.sh"
        user: root
    - name: Download Restic
      get_url:
        url: https://github.com/restic/restic/releases/download/v0.18.0/restic_0.18.0_linux_amd64.bz2 
        dest: /tmp/restic.bz2

    - name: Install Restic if new
      shell: |
        bunzip2 /tmp/restic.bz2
        mv /tmp/restic /usr/local/bin/restic
        chmod +x /usr/local/bin/restic
      args:
        creates: /usr/local/bin/restic

    - name: Write Restic env file
      copy:
        dest: /etc/restic.env
        content: |
          export RESTIC_REPOSITORY={{ restic_repo }}
          export RESTIC_PASSWORD={{ restic_password }}
          export AWS_ACCESS_KEY_ID={{ restic_access_key }}
          export AWS_SECRET_ACCESS_KEY={{ restic_secret_key }}
        mode: '0600'

    - name: Deploy Restic backup script
      copy:
        dest: /usr/local/bin/restic-backup.sh
        content: |
          #!/usr/bin/env bash
          source /etc/restic.env
          restic backup /etc /opt/infra-playbooks /var/www
          restic forget --keep-daily 14 --keep-weekly 4 --prune
        mode: '0755'

    - name: Schedule daily Restic backup at 02:30
      cron:
        name: "daily restic backup"
        minute: "30"
        hour: "2"
        job: "/usr/local/bin/restic-backup.sh"
        user: root
